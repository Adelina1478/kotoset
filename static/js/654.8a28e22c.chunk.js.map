{"version":3,"file":"static/js/654.8a28e22c.chunk.js","mappings":"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","sources":["components/login/login.jsx","utils/validators/validators.js"],"sourcesContent":["import { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Navigate } from \"react-router-dom\";\nimport { login } from \"../../Redux/authReduser\";\nimport { loginFormSchema, validateLoginForm } from \"../../utils/validators/validators\";\n\nconst Login = (props) => {\n    if (props.isAuth) return <Navigate to='/profile' />\n    return (\n        <div>\n            <h1>Login</h1>\n            <Formik\n    initialValues={{ email: \"\", password: \"\", rememberMe: false, captcha: \"\" }}\n    validate={validateLoginForm}\n    validationSchema={loginFormSchema}\n    onSubmit={(values) => {\n        props.login(values.email, values.password, values.rememberMe, values.captcha);\n    }}\n>\n    {() => (\n        <Form>\n            <div>\n                <Field type=\"email\" name=\"email\" placeholder=\"e-mail\" />\n            </div>\n            <ErrorMessage name=\"email\" component=\"div\" style={{ color: 'red' }} />\n            <div>\n                <Field type=\"password\" name=\"password\" placeholder=\"password\" />\n            </div>\n            <ErrorMessage name=\"password\" component=\"div\" style={{ color: 'red' }} />\n\n            <div>\n                <Field type=\"checkbox\" name=\"rememberMe\" />\n                <label htmlFor=\"rememberMe\"> remember me </label>\n            </div>\n\n            {props.captchaUrl && <img src={props.captchaUrl} alt=\"captcha\" />}\n            {props.captchaUrl && (\n                <div>\n                    <Field type=\"text\" name=\"captcha\" placeholder=\"Symbols from image\" />\n                    <ErrorMessage name=\"captcha\" component=\"div\" style={{ color: 'red' }} />\n                </div>\n            )}\n\n            <button type=\"submit\">Log in</button>\n        </Form>\n    )}\n</Formik>\n\n        </div>\n    )\n};\n\nconst mapStateToProps = (state) => ({\n    captchaUrl: state.auth.captchaUrl,\n    isAuth: state.auth.isAuth\n\n})\nexport default connect(mapStateToProps, { login })(Login);\n\n\n\n","import * as Yup from \"yup\";\n\nexport const loginFormSchema = Yup.object().shape({\n    email: Yup.string()\n        .required(\"Field is required\"),\n    password: Yup.string()\n        .required(\"Field is required\")\n        .max(20, \"Nice try, nobody has a first name that long\")\n        .min(2, \"Must be longer than 2 characters\")\n});\n\nexport const validateLoginForm = values => {\n    const errors = {};\n    if (!values.email) {\n        errors.email = 'Field is required';\n    } else if (\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n    ) {\n        errors.email = 'Invalid email address';\n    }\n    if (!values.password) {\n        errors.password = 'Field is required';\n    } else if (values.password.length < 2 || values.password.length > 20) {\n        errors.password = 'Password must be between 2 and 20 characters';\n    }\n\n    return errors;\n};\n\nexport const validationSchema = Yup.object({\n    contacts: Yup.object().shape({\n        facebook: Yup.string()\n            .nullable() // Позволяет пустые значенияs\n            .test('is-url-or-empty', 'Некорректный URL', value => !value || Yup.string().url().isValidSync(value)),\n        website: Yup.string()\n            .nullable()\n            .test('is-url-or-empty', 'Некорректный URL', value => !value || Yup.string().url().isValidSync(value)),\n        vk: Yup.string()\n            .nullable()\n            .test('is-url-or-empty', 'Некорректный URL', value => !value || Yup.string().url().isValidSync(value)),\n        twitter: Yup.string()\n            .nullable()\n            .test('is-url-or-empty', 'Некорректный URL', value => !value || Yup.string().url().isValidSync(value)),\n        instagram: Yup.string()\n            .nullable()\n            .test('is-url-or-empty', 'Некорректный URL', value => !value || Yup.string().url().isValidSync(value)),\n        youtube: Yup.string()\n            .nullable()\n            .test('is-url-or-empty', 'Некорректный URL', value => !value || Yup.string().url().isValidSync(value)),\n        github: Yup.string()\n            .nullable()\n            .test('is-url-or-empty', 'Некорректный URL', value => !value || Yup.string().url().isValidSync(value)),\n        mainLink: Yup.string()\n            .nullable()\n            .test('is-url-or-empty', 'Некорректный URL', value => !value || Yup.string().url().isValidSync(value)),\n    }),\n});\n\n\n\n\n"],"names":["connect","state","captchaUrl","auth","isAuth","login","props","_jsx","Navigate","to","_jsxs","children","Formik","initialValues","email","password","rememberMe","captcha","validate","validateLoginForm","validationSchema","loginFormSchema","onSubmit","values","Form","Field","type","name","placeholder","ErrorMessage","component","style","color","htmlFor","src","alt","Yup","shape","required","max","min","errors","test","length","contacts","facebook","nullable","value","url","isValidSync","website","vk","twitter","instagram","youtube","github","mainLink"],"sourceRoot":""}