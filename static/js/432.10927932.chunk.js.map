{"version":3,"file":"static/js/432.10927932.chunk.js","mappings":"sJAIA,IAAIA,EAA8BC,IAAK,CACnCC,OAAQD,EAAME,KAAKD,SAGhB,MAAME,EAAkBC,IAC3B,MAAMC,UAA0BC,EAAAA,UAC5BC,MAAAA,GACI,OAAKC,KAAKC,MAAMR,QACTS,EAAAA,EAAAA,KAACN,EAAS,IAAKI,KAAKC,SADIC,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAACC,GAAK,UAElD,EAOJ,OAFmCC,EAAAA,EAAAA,IAAQd,EAARc,CAAoCR,EAElC,C,uHCnBzC,SAAgB,QAAU,yBAAyB,OAAS,wBAAwB,WAAa,4BAA4B,SAAW,0BAA0B,QAAU,yBAAyB,KAAO,uB,aCG5M,MAMA,EANkBI,IACPC,EAAAA,EAAAA,KAAA,OAAKI,UAAWC,EAAEC,OAAQ,IAAMD,EAAEE,OAAOC,UAC5CR,EAAAA,EAAAA,KAACS,EAAAA,GAAO,CAACP,GAAK,YAAaH,EAAMW,GAAGF,SAAGT,EAAMY,SCQrD,EAXiBZ,IAEbC,EAAAA,EAAAA,KAAA,OAAKI,UAAWC,EAAEC,OAAOE,SAAET,EAAMa,UC4B/BC,EAAoBd,IAMdC,EAAAA,EAAAA,KAACc,EAAAA,GAAM,CACPC,cAAe,CAACC,eAAgB,IAEhCC,SAAUA,CAACC,EAAMC,KAAmB,IAAjB,UAACC,GAAUD,EARjBD,KACjBnB,EAAMsB,YAAYH,EAAO,EAQjBI,CAAeJ,EAAOF,gBACtBI,EAAW,CAACF,OAAQ,IAAK,EACvBV,SACLA,KACGe,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAhB,SAAA,EACDR,EAAAA,EAAAA,KAAA,OAAAQ,UACIR,EAAAA,EAAAA,KAACyB,EAAAA,GAAK,CAACC,GAAI,WAAYf,KAAM,iBAAkBgB,YAAa,eAEhE3B,EAAAA,EAAAA,KAAA,UAAQ4B,KAAM,SAASpB,SAAC,cAQ5C,EAlDiBT,IACb,IAAIT,EAAQS,EAAM8B,WAEdC,EAAgBxC,EAAMyC,QAAQC,KAAIC,IAAKjC,EAAAA,EAAAA,KAACkC,EAAU,CAACvB,KAAMsB,EAAEtB,KAAiBD,GAAIuB,EAAEvB,IAAZuB,EAAEvB,MACxEyB,EAAiB7C,EAAM8C,SAASJ,KAAIK,IAAKrC,EAAAA,EAAAA,KAACsC,EAAO,CAAC1B,QAASyB,EAAEzB,SAAcyB,EAAE3B,MAC5DpB,EAAM0B,eAI3B,OAAKjB,EAAMR,QAGPgC,EAAAA,EAAAA,MAAA,OAAKnB,UAAWC,EAAE0B,QAAQvB,SAAA,EACtBR,EAAAA,EAAAA,KAAA,OAAKI,UAAWC,EAAEkC,aAAa/B,SAC1BsB,KAEL9B,EAAAA,EAAAA,KAAA,OAAKI,UAAWC,EAAE+B,SAAS5B,UACvBR,EAAAA,EAAAA,KAAA,OAAAQ,SAAM2B,OAEVnC,EAAAA,EAAAA,KAACa,EAAiB,CAACQ,YAAatB,EAAMsB,kBAVpBrB,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAACC,GAAI,UAWlC,ECTV,SAAesC,EAAAA,EAAAA,KACXrC,EAAAA,EAAAA,KAfkBb,IACZ,CACFuC,WAAYvC,EAAMuC,eAIDY,IACf,CACFpB,YAAcL,IAAmByB,GAASC,EAAAA,EAAAA,IAAmB1B,GAAiB,MAQlFvB,EAAAA,EAFJ,CAIEkD,E","sources":["HOC/AuthRedirect.js","webpack://react-1/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Navigate } from \"react-router-dom\";\n\nlet mapStateToPropsForRedirect = (state)=> ({\n    isAuth: state.auth.isAuth\n})\n\nexport const withAuthRedirect=(Component)=>{\n    class RedirectComponent extends React.Component{\n        render(){\n            if (!this.props.isAuth) return <Navigate to ={\"/login\"}/>\n            return <Component {...this.props}/>\n        }\n    }\n\n\n    \n    let ConnectedAuthRedirectComponent=connect(mapStateToPropsForRedirect)(RedirectComponent);\n    \n    return ConnectedAuthRedirectComponent;\n}","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__kF2XK\",\"dialog\":\"Dialogs_dialog__Vhado\",\"dialogItem\":\"Dialogs_dialogItem__92QgA\",\"messages\":\"Dialogs_messages__j-Hff\",\"message\":\"Dialogs_message__qJGO0\",\"send\":\"Dialogs_send__t23Oq\"};","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport s from './../Dialogs.module.css';\n\nconst DialogItem=(props)=>{\n    return <div className={s.dialog+ ' ' + s.active}>\n        <NavLink to ={\"/dialogs/\"+ props.id}>{ props.name}</NavLink>\n    </div>\n}\n\nexport default DialogItem;","import React from 'react';\nimport s from './../Dialogs.module.css';\n\nconst Message = (props) => {\n    return (\n    <div className={s.dialog}>{props.message}\n    \n\n    </div>\n    \n    )\n}\n\n\nexport default Message;","import { Field, Form, Formik } from 'formik';\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport DialogItem from './DialogItem/DialogItem';\nimport s from './Dialogs.module.css';\nimport Message from './Message/Message';\n\n\n\nconst Dialogs = (props) => {\n    let state = props.dialogPage;\n\n    let dialogElement = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />);\n    let messageElement = state.messages.map(m => <Message message={m.message} key={m.id} />);\n    let newMessageBody = state.newMessageBody;\n\n\n\n    if (!props.isAuth) return <Navigate to={\"/login\"} />\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogElement}\n            </div>\n            <div className={s.messages}>\n                <div>{messageElement}</div>\n            </div>\n            <AddNewMessageForm sendMessage={props.sendMessage}/>\n    </div>\n    )\n}\n\nconst AddNewMessageForm =(props)=>{\n    let addNewMessage = (values) => {\n        props.sendMessage(values);\n    }\n    \n    return(\n            <Formik\n            initialValues={{newMessageBody: \"\"}\n            }\n            onSubmit={(values, {resetForm}) => {\n                addNewMessage( values.newMessageBody );\n                resetForm( {values: ''} );\n                }}>\n            {() => (\n                <Form>\n                    <div>\n                        <Field as={'textarea'} name={'newMessageBody'} placeholder={'message'}/>\n                    </div>\n                    <button type={'submit'}>Send</button>\n                </Form>\n            )}\n        </Formik>\n\n    )\n}\n\nexport default Dialogs;\n\n\n","import { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withAuthRedirect } from '../../HOC/AuthRedirect';\nimport { sendMessageCreator } from '../../Redux/DialogReducer';\nimport Dialogs from './Dialogs';\n\nlet mapStateToProps =(state)=>{\n    return{\n        dialogPage: state.dialogPage,\n    }\n\n}\nlet mapDispatchToProps =(dispatch)=>{\n    return{\n        sendMessage: (newMessageBody )=>{dispatch(sendMessageCreator(newMessageBody ));}\n    \n}\n}\n\n\nexport default compose(\n    connect(mapStateToProps,mapDispatchToProps),\n    withAuthRedirect\n\n)(Dialogs);"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","React","render","this","props","_jsx","Navigate","to","connect","className","s","dialog","active","children","NavLink","id","name","message","AddNewMessageForm","Formik","initialValues","newMessageBody","onSubmit","values","_ref","resetForm","sendMessage","addNewMessage","_jsxs","Form","Field","as","placeholder","type","dialogPage","dialogElement","dialogs","map","d","DialogItem","messageElement","messages","m","Message","dialogsItems","compose","dispatch","sendMessageCreator","Dialogs"],"sourceRoot":""}