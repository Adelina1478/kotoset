{"version":3,"file":"static/js/569.ecaba133.chunk.js","mappings":"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","sources":["HOC/AuthRedirect.js","webpack://react-1/./src/components/common/preloader/formsControls/FormControls.module.css?4a67","components/common/preloader/formsControls/Formscontrols.js","webpack://react-1/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileStatusWithHoC.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","webpack://react-1/./src/components/Profile/myposts/MyPosts.module.css?27f2","webpack://react-1/./src/components/Profile/myposts/post/Post.module.css?2784","components/Profile/myposts/post/Post.jsx","components/Profile/myposts/MyPosts.jsx","components/Profile/myposts/MyPostContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","utils/validators/validators.js"],"sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Navigate } from \"react-router-dom\";\n\nlet mapStateToPropsForRedirect = (state)=> ({\n    isAuth: state.auth.isAuth\n})\n\nexport const withAuthRedirect=(Component)=>{\n    class RedirectComponent extends React.Component{\n        render(){\n            if (!this.props.isAuth) return <Navigate to ={\"/login\"}/>\n            return <Component {...this.props}/>\n        }\n    }\n\n\n    \n    let ConnectedAuthRedirectComponent=connect(mapStateToPropsForRedirect)(RedirectComponent);\n    \n    return ConnectedAuthRedirectComponent;\n}","// extracted by mini-css-extract-plugin\nexport default {\"formcontrol\":\"FormControls_formcontrol__1RIK4\",\"error\":\"FormControls_error__xula6\"};","import { Field } from \"formik\";\nimport React from \"react\";\nimport styles from \"./FormControls.module.css\";\n\n// Компонент Textarea для использования с Formik\nexport const Textarea = ({ field, form: { touched, errors }, ...props }) => {\n    const hasError = touched[field.name] && errors[field.name];\n    return (\n        <div className={styles.formcontrol + \" \" + (hasError ? styles.error : \"\")}>\n            <div>\n                <textarea {...field} {...props} />\n            </div>\n            {hasError && <span>{errors[field.name]}</span>}\n        </div>\n    );\n};\n\n// Компонент Input для использования с Formik\nexport const Input = ({ field, form: { touched, errors }, ...props }) => {\n    const hasError = touched[field.name] && errors[field.name];\n    return (\n        <div className={styles.formcontrol + \" \" + (hasError ? styles.error : \"\")}>\n            <div>\n                <input {...field} {...props} />\n            </div>\n            {hasError && <span>{errors[field.name]}</span>}\n        </div>\n    );\n};\n\n// Функция для создания полей\nexport const createField = (placeholder, name, validators, component, props = {}, text = \"\") => {\n    return (\n        <div>\n            <Field\n                placeholder={placeholder}\n                name={name}\n                component={component}\n                validate={validators}\n                {...props}\n            />\n            {text}\n\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"ProfileInfo_description__3wtAW\",\"img\":\"ProfileInfo_img__DiUD6\",\"mainphoto\":\"ProfileInfo_mainphoto__HyBIw\",\"contact\":\"ProfileInfo_contact__n1ktI\",\"error\":\"ProfileInfo_error__xPkp3\"};","import { ErrorMessage, Form, Formik } from 'formik';\nimport React from 'react';\nimport { validationSchema } from '../../../utils/validators/validators';\nimport { createField, Input } from '../../common/preloader/formsControls/Formscontrols';\nimport s from './ProfileInfo.module.css';\n\nconst ProfileDataForm = ({ profile, onSubmit }) => {\n    const initialValues = {\n        fullName: profile?.fullName || '',\n        lookingForAJob: profile?.lookingForAJob || false,\n        lookingForAJobDescription: profile?.lookingForAJobDescription || '',\n        aboutMe: profile?.aboutMe || '',\n        contacts:profile?.contacts|| '',\n    };\n\n    return (\n        <Formik\n            initialValues={initialValues}\n            onSubmit={onSubmit}// Обработка отправки формы\n            validationSchema={validationSchema}\n\n        >\n            {({ values }) => (\n                <Form>\n                    <div>\n                        <button type=\"submit\">Сохранить</button>\n                    </div>\n                    <div>\n                        <b>Имя: </b>\n                        {createField('Full name', 'fullName', [], Input)}\n                    </div>\n                    <div>\n                        <b>Ищу работу: </b> {values.lookingForAJob ? 'yes' : 'no'}\n                        {createField('', 'lookingForAJob', [], Input, { type: 'checkbox' })}\n                    </div>\n\n                    {values.lookingForAJob && (\n                        <div>\n                            <b>Мои профессиональные навыки: </b>\n                            {createField('Профессиональные навыки', 'lookingForAJobDescription', [], Input)}\n                        </div>\n                    )}\n\n                    <div>\n                        <b>Обо мне: </b>\n                        {createField('Обо мне', 'aboutMe', [], Input)}\n                    </div>\n                    <div>\n                        <b>Контакты: </b> {Object.keys(profile.contacts).map(key=>{\n                            return <div key={key} className={s.contact}>\n                                <b>{key}: {createField(key,'contacts.'+ key, [], Input)}</b>\n                                <ErrorMessage name={`contacts.${key}`} component=\"div\" className={s.error} />\n                                </div>\n                        })}\n                    </div>\n                    \n                </Form>\n            )}\n        </Formik>\n    );\n};\n\nexport default ProfileDataForm;\n","import React, { useEffect, useState } from 'react';\n\n\nconst ProfileStatusWithHoks = (props)=>{\n    let [editMode,setEditMode]= useState(false);\n    let [status,setStatus]= useState(props.status);\n\n    useEffect(()=>{//хук нельзя писать в условиях  в циклах тое нельзя читать документацию!!\n        setStatus(props.status);}, [props.status]);\n\n    const activateEditMode=()=>{\n        setEditMode(true);\n    }\n    const deactivateEditMode=()=>{\n        setEditMode(false)\n        props.updatestatus(status);\n    }\n\n    const onStatusChange=(e)=>{\n        setStatus(e.currentTarget.value);\n    }\n        return (\n            <div>\n                {!editMode &&\n                    <div>\n                        <b>Status: </b><span onDoubleClick={activateEditMode}>{props.status || \"--------\"}</span>\n                    </div>\n                }\n                {editMode &&\n                    <div>\n                        <input onChange={onStatusChange} autoFocus={true} onBlur= {deactivateEditMode}value={status}/>\n                    </div>\n                }\n            </div>\n\n\n            )\n    }\n\n\nexport default ProfileStatusWithHoks;","import React, { useState } from 'react';\nimport userimg from \"../../../assets/images/ava.jpg\";\nimport Preloader from '../../common/preloader/preloader';\nimport ProfileDataForm from './ProfileDataForm';\nimport s from './ProfileInfo.module.css';\nimport ProfileStatusWithHoks from './ProfileStatusWithHoC';\n\nconst ProfileInfo = ({profile,status,updatestatus,isOwner,savePhoto, saveProfile}) => {\n    let [editMode,setEditMode]= useState(false);\n\n    if (!profile){\n        return <Preloader/>\n    }\n    const ChangePhotoAva=(e)=>{\n        if( e.target.files[0]){\n            savePhoto(e.target.files[0])\n        }\n    }\n    const onSubmit=(formData)=>{\n        saveProfile(formData);\n        setEditMode(false);\n\n    }\n\n    return (\n        <div>\n            <div className={s.img}>\n                <img src='https://img.freepik.com/premium-photo/blue-pattern-panorama-banner-background_7954-22619.jpg'/>\n            </div>\n            <div className= {s.description}>\n                <img src={profile.photos.large || userimg} className={s.mainphoto}/>\n                <div>{isOwner && <input type={\"file\"} onChange={ChangePhotoAva}/>}</div>\n                {editMode ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/> :<ProfileData\n                goToEditMode={()=>{setEditMode(true)}}\n                profile={profile} isOwner={isOwner}/>}\n                <ProfileStatusWithHoks status = {status} updatestatus={updatestatus}/>\n            </div>\n        </div>\n    )\n}\n\nconst ProfileData=({profile, isOwner, goToEditMode})=>{\n    return <div>\n        {isOwner && <div><button onClick={goToEditMode}>Редактировать</button></div>}\n        <div><b>Имя: </b>{profile.fullName}</div>\n    <div><b>Ищу работу: </b>{profile.lookingForAJob ? \"yes\":\"no\"}</div>\n    {profile.lookingForAJob &&\n    <div>\n        <b>Мои профессиональные навыки: </b>:{profile.lookingForAJobDescription}\n    </div>\n    }\n    <div><b>Обо мне: </b>{profile.aboutMe}</div>\n    <div>\n        <b>Контакты: </b> {Object.keys(profile.contacts).map(key => {\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\n        })}\n    </div>\n    </div>\n}\n\n\n\nconst Contact = ({contactTitle, contactValue})=>{\n    return <div className= {s.contact}><b>{contactTitle}</b>: {contactValue}</div>\n}\n\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postBlocs\":\"MyPosts_postBlocs__5OD-d\",\"posts\":\"MyPosts_posts__TF7nH\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__ITIzK\"};","import React from 'react';\nimport prof from './Post.module.css';\n\nconst Post = (props) =>{\n    return <div className = {prof.item}>\n        <img src = 'https://cs14.pikabu.ru/post_img/big/2023/02/13/8/1676296367166243426.png'/>\n        {props.message}\n                <div>\n                <span>like</span> {props.likeCount}\n                <span> dislike</span> {props.disCount}\n                </div>\n                \n            </div>\n            \n\n\n\n}\nexport default Post;","import { Field, Form, Formik } from 'formik';\nimport React from 'react';\nimport prof from './MyPosts.module.css';\nimport Post from './post/Post';\n\nconst MyPosts =(props)=>{\n    let PostsElement = props.Posts.map(p => <Post key={p.id} message={p.message} likeCount={p.likeCount} disCount={p.disCount} />)\n    let newPostElement = React.createRef();\n\n    /*let onAddPost = () => {\n        props.addPost();\n    }\n    let onPostChange = () => {\n        let text = newPostElement.current.value;\n        props.updateNewPostText(text);\n    }*/\n\n\n    return <div className={prof.postBlocs}>\n        <h3>My posts</h3>\n        <div>\n            <AddNewPostForm addPost={props.addPost}/>\n        </div>\n        <div className={prof.posts}>\n            {PostsElement}\n        </div>\n        \n        </div>\n}\nlet AddNewPostForm = (props) =>{\n    let onAddPost = (values) => {\n        props.addPost(values);\n    }\n    return(\n        <Formik\n            initialValues={{newPostText: \"\"}\n            }\n            onSubmit={(values, {resetForm}) => {\n                onAddPost( values.newPostText );\n                resetForm( {values: ''} );\n                }}>\n            {() => (\n                <Form>\n                    <div>\n                        <Field name={'newPostText'} as={'textarea'}/>\n                    </div>\n                    <div>\n                <button type={'submit'}>AddPost</button>\n            </div>\n                </Form>\n            )}\n        </Formik>\n    )\n}\n\nexport default MyPosts;\n","import { connect } from 'react-redux';\nimport { addPostActionCreator } from '../../../Redux/ProfileReducer';\nimport MyPosts from './MyPosts';\n\nconst mapStateToProps =(state)=>{\n    return{\n        Posts : state.profilePage.Posts,\n        newPostText :state.profilePage.newPostText\n    }\n}\nconst mapDispatchToProps=(dispatch)=>{\n    return{\n        addPost:(newPostText)=>{\n            dispatch(addPostActionCreator(newPostText));\n        }\n    }\n}\n\n\n\nconst MyPostsContainer= connect( mapStateToProps ,mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;","import React from 'react';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport MyPostsContainer from './myposts/MyPostContainer';\n\n\nconst Profile = (props) => {\n    \n    return <div>\n        <ProfileInfo profile={props.profile} status={props.status} updatestatus={props.updatestatus} isOwner={props.isOwner} savePhoto={props.savePhoto} saveProfile={props.saveProfile}/>\n        <MyPostsContainer/>\n    </div>\n\n}\nexport default Profile;","/*import axios from 'axios';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { setUserProfile } from '../../Redux/ProfileReducer';\nimport Profile from './Profile';\n\nclass ProfileContainer extends React.Component {\n    \n    componentDidMount() {\n        let userId = useParams();;\n        if (!userId) {\n            userId=2;\n        }\n        axios.get(`https://social-network.samuraijs.com/api/1.0/profile/`+userId).then((response) => {\n            this.props.setUserProfile(response.data);\n        });\n    }\n    render() {\n\n        return (\n            <Profile {...this.props} profile={this.props.profile} />)\n\n    }\n}\n\nlet mapStateToProps = (state) => ({\n    profile: state.profilePage.profile\n});\n\n\nlet WithUrlDataContainerComponent = useParams(ProfileContainer);\nexport default useSelector(mapStateToProps, { setUserProfile })(WithUrlDataContainerComponent);*/\nimport React, { useEffect } from 'react';\nimport { connect } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { compose } from 'redux';\nimport { withAuthRedirect } from '../../HOC/AuthRedirect';\nimport { getstatus, getUserProfile, savePhoto, saveProfile, updatestatus } from '../../Redux/ProfileReducer';\nimport Profile from \"./Profile\";\n\nfunction ProfileContainer(props) {\n    let { userId } = useParams();\n    if (!userId) {\n        userId = 31422;\n    }\n    useEffect(() => {\n        props.getUserProfile(userId);\n        props.getstatus(userId);\n        }, [userId]);\n    \n    \n    return (\n        <div>\n            <Profile profile={props.profile} status={props.status} updatestatus={props.updatestatus} isOwner={userId===31422} savePhoto={props.savePhoto} saveProfile={props.saveProfile}/>\n        </div>\n    );\n}\n\nlet mapStateToProps = (state)=> ({\n    profile: state.profilePage.profile,\n    status:state.profilePage.status,\n    isOwner: state.auth.userId,\n})\n\nexport default  compose(\n    withAuthRedirect,\n    connect (mapStateToProps, {getUserProfile,getstatus,updatestatus, savePhoto, saveProfile}),\n    /*withAuthRedirect*/\n)(ProfileContainer);\n\n","import * as Yup from \"yup\";\n\nexport const loginFormSchema = Yup.object().shape({\n    email: Yup.string()\n        .required(\"Field is required\"),\n    password: Yup.string()\n        .required(\"Field is required\")\n        .max(20, \"Nice try, nobody has a first name that long\")\n        .min(2, \"Must be longer than 2 characters\")\n});\n\nexport const validateLoginForm = values => {\n    const errors = {};\n    if (!values.email) {\n        errors.email = 'Field is required';\n    } else if (\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n    ) {\n        errors.email = 'Invalid email address';\n    }\n    if (!values.password) {\n        errors.password = 'Field is required';\n    } else if (values.password.length < 2 || values.password.length > 20) {\n        errors.password = 'Password must be between 2 and 20 characters';\n    }\n\n    return errors;\n};\n\nexport const validationSchema = Yup.object({\n    contacts: Yup.object().shape({\n        facebook: Yup.string()\n            .nullable() // Позволяет пустые значенияs\n            .test('is-url-or-empty', 'Некорректный URL', value => !value || Yup.string().url().isValidSync(value)),\n        website: Yup.string()\n            .nullable()\n            .test('is-url-or-empty', 'Некорректный URL', value => !value || Yup.string().url().isValidSync(value)),\n        vk: Yup.string()\n            .nullable()\n            .test('is-url-or-empty', 'Некорректный URL', value => !value || Yup.string().url().isValidSync(value)),\n        twitter: Yup.string()\n            .nullable()\n            .test('is-url-or-empty', 'Некорректный URL', value => !value || Yup.string().url().isValidSync(value)),\n        instagram: Yup.string()\n            .nullable()\n            .test('is-url-or-empty', 'Некорректный URL', value => !value || Yup.string().url().isValidSync(value)),\n        youtube: Yup.string()\n            .nullable()\n            .test('is-url-or-empty', 'Некорректный URL', value => !value || Yup.string().url().isValidSync(value)),\n        github: Yup.string()\n            .nullable()\n            .test('is-url-or-empty', 'Некорректный URL', value => !value || Yup.string().url().isValidSync(value)),\n        mainLink: Yup.string()\n            .nullable()\n            .test('is-url-or-empty', 'Некорректный URL', value => !value || Yup.string().url().isValidSync(value)),\n    }),\n});\n\n\n\n\n"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","React","render","this","props","_jsx","Navigate","to","connect","Input","_ref2","field","form","touched","errors","hasError","name","_jsxs","className","styles","children","createField","placeholder","validators","component","arguments","length","undefined","text","Field","validate","_ref","profile","onSubmit","initialValues","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","Formik","validationSchema","values","Form","type","Object","keys","map","key","s","ErrorMessage","concat","editMode","setEditMode","useState","status","setStatus","useEffect","onDoubleClick","activateEditMode","onChange","e","currentTarget","value","autoFocus","onBlur","deactivateEditMode","updatestatus","ProfileData","isOwner","goToEditMode","onClick","Contact","contactTitle","contactValue","_ref3","savePhoto","saveProfile","Preloader","src","photos","large","userimg","target","files","ProfileDataForm","formData","ProfileStatusWithHoks","prof","message","likeCount","disCount","AddNewPostForm","newPostText","resetForm","addPost","onAddPost","as","PostsElement","Posts","p","Post","id","profilePage","dispatch","addPostActionCreator","MyPosts","ProfileInfo","MyPostsContainer","compose","userId","getUserProfile","getstatus","useParams","Profile","loginFormSchema","Yup","shape","email","required","password","max","min","validateLoginForm","test","facebook","nullable","url","isValidSync","website","vk","twitter","instagram","youtube","github","mainLink"],"sourceRoot":""}